# modular exponentiation
# result = pow(10, 117, 22663)
# print(result)
#11570

# public keys:

p = 17
q = 23
N = p * q
e = 65537
m = 12

c = pow(m, e, N)
print(c)

#301
# Euler's Totient

p = 857504083339712752489993810777
q = 1029224947942998075080348647219

phi = (p - 1) * (q - 1)
print(phi)
# 882564595536224140639625987657529300394956519977044270821168


# private keys
from Crypto.Util.number import inverse,long_to_bytes

p = 857504083339712752489993810777
q = 1029224947942998075080348647219
e = 65537

phi = (p - 1) * (q - 1)

d = inverse(e, phi)
print(d)
# 121832886702415731577073962957377780195510499965398469843281
# RSA Decryption
N2 = 882564595536224140639625987659416029426239230804614613279163
d = 121832886702415731577073962957377780195510499965398469843281
c = 77578995801157823671636298847186723593814843845525223303932

m = pow(c, d, N2)

print(m)
# 13371337


#RSA Signatures

import hashlib
from Crypto.Util.number import bytes_to_long

N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
private_key_file = "private_key.txt"
flag_message = b"crypto{Immut4ble_m3ssag1ng}"

# Hash the message using SHA256
h = hashlib.sha256(flag_message).digest()

# Convert hash bytes to an integer
h_int = bytes_to_long(h)

# Sign the hash with the private key
signature = pow(h_int, d, N)

print("Signature:", signature)

# 134807384045900908033398316492384543761831897449706831299097660788777065832824226867105452172
#75797376709672358894231550335007974983458408620258478729775647818876610072903021235573923300070103666940
#53404764490047577331868258577269815561745147744844119815071042081899534723592111181206865678299816806496
#09654517194910725690576367011904297600471932618860928620241184878264527665135338607347241242283051589142
#25250488399673645732882077575252662461860972889771112594906884441454355959482925283992539925713424132009
#76872138982884890709977204083638385652460500894290708349038310975740694054086697823747168629666168583908
#3475
